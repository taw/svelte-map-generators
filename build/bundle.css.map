{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Civ1.svelte",
    "../../DiamondSquare.svelte",
    "../../Emoji.svelte",
    "../../Perlin.svelte",
    "../../Uniform.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Uniform from \"./Uniform.svelte\";\n  import Perlin from \"./Perlin.svelte\";\n  import Civ1 from \"./Civ1.svelte\";\n  import DiamondSquare from \"./DiamondSquare.svelte\";\n  import Emoji from \"./Emoji.svelte\";\n\n  let menu = [\n    {value: \"uniform\", nav: \"Uniform\", header: \"Uniform Noise\", component: Uniform},\n    {value: \"emoji\", nav: \"Emoji\", header: \"Emoji Map Symbols\", component: Emoji},\n    {value: \"diamond\", nav: \"Diamond Square\", header: \"Diamond Square\", component: DiamondSquare},\n    {value: \"perlin\", nav: \"Perlin\", header: \"Perlin Noise Island\", component: Perlin},\n    {value: \"civ1\", nav: \"Civ1\", header: \"Civ1 Style Map\", component: Civ1},\n  ]\n  let generator = \"civ1\"\n\n  $: selected = menu.find(m => m.value === generator)\n</script>\n\n<style>\n  navbar {\n    display: flex;\n  }\n  navbar label {\n    display: block;\n    background-color: #bbb;\n    padding: 0em 1em;\n  }\n  navbar label.selected {\n    font-weight: bold;\n    background-color: #999;\n  }\n  navbar input {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n    height: 0;\n    width: 0;\n  }\n  header {\n    font-size: 400%;\n    text-align: center;\n  }\n</style>\n\n<navbar>\n  {#each menu as {value,nav}}\n    <label class:selected={generator===value}><input type=\"radio\" bind:group={generator} value={value}>{nav}</label>\n  {/each}\n</navbar>\n\n{#if selected}\n  <header>{selected.header}</header>\n  <svelte:component this={selected.component}/>\n{:else}\n  <p>No generator selected.</p>\n{/if}\n",
    "<script>\n  import {xsize, ysize, generate} from \"../generators/civ1.js\";\n\n  let colors = {\n    ocean: \"blue\",\n    mountain: \"red\",\n    hills: \"orange\",\n    desert: \"yellow\",\n    plains: \"#ac2\",\n    grassland: \"lime\",\n    tundra: \"#ccc\",\n    arctic: \"white\",\n    swamp: \"purple\",\n    forest: \"#282\",\n  }\n\n  let map = generate();\n</script>\n\n<style>\n  .map {\n    background-color: #ccc;\n    height: 750px;\n    width: 1200px;\n    margin: auto;\n    display: block;\n  }\n  rect {\n    stroke-width: 1px;\n    stroke: black;\n  }\n</style>\n\n<svg class=\"map\">\n  {#each Array(ysize) as _, y}\n    {#each Array(xsize) as _, x}\n      <rect\n        x={15 * x}\n        y={15 * y}\n        height=\"15\"\n        width=\"15\"\n        style={`fill:${colors[map[y][x]]}`} />\n    {/each}\n  {/each}\n</svg>\n",
    "<script>\n  import {xsize, ysize, generate} from \"../generators/diamond_square.js\";\n  let map = generate();\n</script>\n\n<style>\n  .map {\n    background-color: #ccc;\n    height: 640px;\n    width: 640px;\n    margin: auto;\n    display: block;\n  }\n  rect {\n    stroke-width: 1px;\n    stroke: black;\n  }\n</style>\n\n<svg class=\"map\">\n  {#each Array(ysize) as _, y}\n    {#each Array(xsize) as _, x}\n      <rect x={20*x} y={20*y} height=20 width=20 style={`fill:${map[y][x]}`} />\n    {/each}\n  {/each}\n</svg>\n",
    "<script>\n  let xsize = 40;\n  let ysize = 40;\n  let points = [];\n\n  let terrain = {\n    \"mountain\": {color: \"orange\", icon: \"‚õ∞Ô∏è\"},\n    \"snow-mountain\": {color: \"white\", icon: \"üèîÔ∏è\"},\n    \"volcano\": {color: \"red\", icon: \"üåã\"},\n    \"desert\": {color: \"yellow\", icon: \"üèúÔ∏è\"},\n    \"desert-island\": {color: \"yellow\", icon: \"üèùÔ∏è\"},\n    \"water\": {color: \"blue\", icon: \"üåä\"},\n    \"beach\": {color: \"yellow\", icon: \"üèñÔ∏è\"},\n    \"cold-forest\": {color: \"green\", icon: \"üå≤\"},\n    \"forest\": {color: \"green\", icon: \"üå≥\"},\n    \"palm-forest\": {color: \"green\", icon: \"üå¥\"},\n  }\n\n  function random_terrain() {\n    let options = Object.keys(terrain);\n    return options[Math.floor(Math.random() * options.length)]\n  }\n\n  for (let x = 0; x < xsize; x++) {\n    for (let y = 0; y < ysize; y++) {\n      let t = random_terrain();\n      points.push({ x, y, t });\n    }\n  }\n</script>\n\n<style>\n  .map {\n    background-color: #ccc;\n    height: 800px;\n    width: 800px;\n    margin: auto;\n    display: block;\n  }\n  rect {\n    stroke-width: 1px;\n    stroke: black;\n  }\n</style>\n\n<svg class=\"map\">\n  {#each points as { x, y, t }}\n    <rect x={20 * x} y={20 * y} height=\"20\" width=\"20\" style={`fill:${terrain[t].color}`} />\n    <text x={20 * x + 10} y={20 * y + 10} text-anchor=\"middle\" dominant-baseline=\"central\">{terrain[t].icon}</text>\n  {/each}\n</svg>\n",
    "<script>\n  import {generate} from \"../generators/perlin.js\";\n  let points = generate();\n</script>\n\n<style>\n.map {\n  background-color: #ccc;\n  height: 800px;\n  width: 800px;\n  margin: auto;\n  display: block;\n}\nrect {\n  stroke-width: 1px;\n  stroke: black;\n}\n</style>\n\n<svg class=\"map\">\n  {#each points as {x,y,c,h}}\n    <rect x={10*x} y={10*y} height=10 width=10 style={`fill:${c}`} data-h={h} />\n  {/each}\n</svg>\n",
    "<script>\n  let xsize = 40;\n  let ysize = 40;\n  let points = [];\n\n  for (let x = 0; x < xsize; x++) {\n    for (let y = 0; y < ysize; y++) {\n      let c = Math.random() > 0.5 ? \"green\" : \"blue\";\n      points.push({ x, y, c });\n    }\n  }\n</script>\n\n<style>\n  .map {\n    background-color: #ccc;\n    height: 800px;\n    width: 800px;\n    margin: auto;\n    display: block;\n  }\n  rect {\n    stroke-width: 1px;\n    stroke: black;\n  }\n</style>\n\n<svg class=\"map\">\n  {#each points as { x, y, c }}\n    <rect x={20 * x} y={20 * y} height=\"20\" width=\"20\" style={`fill:${c}`} />\n  {/each}\n</svg>\n"
  ],
  "names": [],
  "mappings": "AAoBE,MAAM,8BAAC,CAAC,AACN,OAAO,CAAE,IAAI,AACf,CAAC,AACD,qBAAM,CAAC,KAAK,eAAC,CAAC,AACZ,OAAO,CAAE,KAAK,CACd,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,GAAG,CAAC,GAAG,AAClB,CAAC,AACD,qBAAM,CAAC,KAAK,SAAS,eAAC,CAAC,AACrB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,qBAAM,CAAC,KAAK,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,CAAC,AACV,CAAC,AACD,MAAM,8BAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,AACpB,CAAC;ACtBD,IAAI,eAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,IAAI,eAAC,CAAC,AACJ,YAAY,CAAE,GAAG,CACjB,MAAM,CAAE,KAAK,AACf,CAAC;ACxBD,IAAI,cAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,YAAY,CAAE,GAAG,CACjB,MAAM,CAAE,KAAK,AACf,CAAC;ACgBD,IAAI,cAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,YAAY,CAAE,GAAG,CACjB,MAAM,CAAE,KAAK,AACf,CAAC;ACpCH,IAAI,cAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,YAAY,CAAE,GAAG,CACjB,MAAM,CAAE,KAAK,AACf,CAAC;ACFC,IAAI,cAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,YAAY,CAAE,GAAG,CACjB,MAAM,CAAE,KAAK,AACf,CAAC"
}